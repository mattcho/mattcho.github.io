<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Matt Cho, a full-stack web developer</title>
  <id>http://m3xm.github.io</id>
  <link href="http://m3xm.github.io" />
  <link href="http://m3xm.github.io/atom.xml" rel="self" />
  <updated>2015-03-11T18:43:30-04:00</updated>
  <rights>Copyright 2014, Matt Cho</rights>
  <author>
    <name>Matt Cho</name>
  </author>
  
    <entry>
      <title>Understanding JavaScript</title>
      <link href="http://m3xm.github.io/2015/03/11/today's%20learning/" />
      <summary type="html">&lt;p&gt;I think that a conceptual understanding of the main feaures of a programming language is the better way to learn it than depending on trials-and-errors being repeated until it works somehow. That being said, I decided to write about JavaScript, particularly its inherent concepts worth revisiting from time to time. Of course, I cannot write everything in one post, so I will continue adding posts avoiding repeated contents.&lt;/p&gt;

&lt;h3 id=&quot;whitespace&quot;&gt;Whitespace&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Whitespace can be used when formatting characters or comments.&lt;/li&gt;
  &lt;li&gt;Whitespace means one of the following cases.
    &lt;ul&gt;
      &lt;li&gt;space&lt;/li&gt;
      &lt;li&gt;tab&lt;/li&gt;
      &lt;li&gt;line end&lt;/li&gt;
      &lt;li&gt;// comments&lt;/li&gt;
      &lt;li&gt;/* comments */ (not recommended. regular expressions)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;objects&quot;&gt;Objects&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The primitive types of JavaScript are numbers, strings, booleans, null and undefined. All other values are objects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Numbers, strings, and booleans are object-like in that they have methods, but they are immutable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Objects in JavaScript are mutable keyed collections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In JavaScript objects, a property name can be any string, including the empty string.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A property value can be any JavaScript value except for &lt;em&gt;undefined&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There is no constraint on the names of new properties or on the values of properties.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JavaScript’s prototype feature can reduce object initialization time and memory consumption.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;functions&quot;&gt;Functions&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Functions in JavaScript are objects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Object literals are linked to Object.prototype&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Function objects are linked to Function.prototype&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Every function has two additional properties: context and the implementing code.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</summary>
      <id>http://m3xm.github.io/2015/03/11/today's%20learning/</id>
      <updated>2015-03-11T00:00:00-04:00</updated>
      <author>
        <name>Matt Cho</name>
      </author>
    </entry>
  
    <entry>
      <title>Understanding JavaScript</title>
      <link href="http://m3xm.github.io/2015/02/07/javascript/" />
      <summary type="html">&lt;p&gt;I think that a conceptual understanding of the main feaures of a programming language is the better way to learn it than depending on trials-and-errors being repeated until it works somehow. That being said, I decided to write about JavaScript, particularly its inherent concepts worth revisiting from time to time. Of course, I cannot write everything in one post, so I will continue adding posts avoiding repeated contents.&lt;/p&gt;

&lt;h3 id=&quot;whitespace&quot;&gt;Whitespace&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;Whitespace can be used when formatting characters or comments.&lt;/li&gt;
  &lt;li&gt;Whitespace means one of the following cases.
    &lt;ul&gt;
      &lt;li&gt;space&lt;/li&gt;
      &lt;li&gt;tab&lt;/li&gt;
      &lt;li&gt;line end&lt;/li&gt;
      &lt;li&gt;// comments&lt;/li&gt;
      &lt;li&gt;/* comments */ (not recommended. regular expressions)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;objects&quot;&gt;Objects&lt;/h3&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The primitive types of JavaScript are numbers, strings, booleans, null and undefined. All other values are objects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Numbers, strings, and booleans are object-like in that they have methods, but they are immutable.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Objects in JavaScript are mutable keyed collections.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;In JavaScript objects, a property name can be any string, including the empty string.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A property value can be any JavaScript value except for &lt;em&gt;undefined&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;There is no constraint on the names of new properties or on the values of properties.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;JavaScript’s prototype feature can reduce object initialization time and memory consumption.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;functions&quot;&gt;Functions&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Functions in JavaScript are objects.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Object literals are linked to Object.prototype&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Function objects are linked to Function.prototype&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Every function has two additional properties: context and the implementing code.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

</summary>
      <id>http://m3xm.github.io/2015/02/07/javascript/</id>
      <updated>2015-02-07T00:00:00-05:00</updated>
      <author>
        <name>Matt Cho</name>
      </author>
    </entry>
  
</feed>
